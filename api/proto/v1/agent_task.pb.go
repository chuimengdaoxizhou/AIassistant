// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: agent_task.proto

package v1

import (
	duration "github.com/golang/protobuf/ptypes/duration"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 定义了代码执行的结果。
type CodeExecutionResult_Outcome int32

const (
	CodeExecutionResult_OUTCOME_UNSPECIFIED CodeExecutionResult_Outcome = 0
	CodeExecutionResult_OK                  CodeExecutionResult_Outcome = 1
	CodeExecutionResult_FAILED              CodeExecutionResult_Outcome = 2
)

// Enum value maps for CodeExecutionResult_Outcome.
var (
	CodeExecutionResult_Outcome_name = map[int32]string{
		0: "OUTCOME_UNSPECIFIED",
		1: "OK",
		2: "FAILED",
	}
	CodeExecutionResult_Outcome_value = map[string]int32{
		"OUTCOME_UNSPECIFIED": 0,
		"OK":                  1,
		"FAILED":              2,
	}
)

func (x CodeExecutionResult_Outcome) Enum() *CodeExecutionResult_Outcome {
	p := new(CodeExecutionResult_Outcome)
	*p = x
	return p
}

func (x CodeExecutionResult_Outcome) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CodeExecutionResult_Outcome) Descriptor() protoreflect.EnumDescriptor {
	return file_agent_task_proto_enumTypes[0].Descriptor()
}

func (CodeExecutionResult_Outcome) Type() protoreflect.EnumType {
	return &file_agent_task_proto_enumTypes[0]
}

func (x CodeExecutionResult_Outcome) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CodeExecutionResult_Outcome.Descriptor instead.
func (CodeExecutionResult_Outcome) EnumDescriptor() ([]byte, []int) {
	return file_agent_task_proto_rawDescGZIP(), []int{3, 0}
}

// 定义了编程语言。
type ExecutableCode_Language int32

const (
	ExecutableCode_LANGUAGE_UNSPECIFIED ExecutableCode_Language = 0
	ExecutableCode_PYTHON               ExecutableCode_Language = 1
	ExecutableCode_GO                   ExecutableCode_Language = 2
)

// Enum value maps for ExecutableCode_Language.
var (
	ExecutableCode_Language_name = map[int32]string{
		0: "LANGUAGE_UNSPECIFIED",
		1: "PYTHON",
		2: "GO",
	}
	ExecutableCode_Language_value = map[string]int32{
		"LANGUAGE_UNSPECIFIED": 0,
		"PYTHON":               1,
		"GO":                   2,
	}
)

func (x ExecutableCode_Language) Enum() *ExecutableCode_Language {
	p := new(ExecutableCode_Language)
	*p = x
	return p
}

func (x ExecutableCode_Language) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExecutableCode_Language) Descriptor() protoreflect.EnumDescriptor {
	return file_agent_task_proto_enumTypes[1].Descriptor()
}

func (ExecutableCode_Language) Type() protoreflect.EnumType {
	return &file_agent_task_proto_enumTypes[1]
}

func (x ExecutableCode_Language) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExecutableCode_Language.Descriptor instead.
func (ExecutableCode_Language) EnumDescriptor() ([]byte, []int) {
	return file_agent_task_proto_rawDescGZIP(), []int{4, 0}
}

// 定义了函数响应的调度方式。
type FunctionResponse_FunctionResponseScheduling int32

const (
	FunctionResponse_SCHEDULING_UNSPECIFIED FunctionResponse_FunctionResponseScheduling = 0
	FunctionResponse_WHEN_IDLE              FunctionResponse_FunctionResponseScheduling = 1
	FunctionResponse_IMMEDIATE              FunctionResponse_FunctionResponseScheduling = 2
)

// Enum value maps for FunctionResponse_FunctionResponseScheduling.
var (
	FunctionResponse_FunctionResponseScheduling_name = map[int32]string{
		0: "SCHEDULING_UNSPECIFIED",
		1: "WHEN_IDLE",
		2: "IMMEDIATE",
	}
	FunctionResponse_FunctionResponseScheduling_value = map[string]int32{
		"SCHEDULING_UNSPECIFIED": 0,
		"WHEN_IDLE":              1,
		"IMMEDIATE":              2,
	}
)

func (x FunctionResponse_FunctionResponseScheduling) Enum() *FunctionResponse_FunctionResponseScheduling {
	p := new(FunctionResponse_FunctionResponseScheduling)
	*p = x
	return p
}

func (x FunctionResponse_FunctionResponseScheduling) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FunctionResponse_FunctionResponseScheduling) Descriptor() protoreflect.EnumDescriptor {
	return file_agent_task_proto_enumTypes[2].Descriptor()
}

func (FunctionResponse_FunctionResponseScheduling) Type() protoreflect.EnumType {
	return &file_agent_task_proto_enumTypes[2]
}

func (x FunctionResponse_FunctionResponseScheduling) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FunctionResponse_FunctionResponseScheduling.Descriptor instead.
func (FunctionResponse_FunctionResponseScheduling) EnumDescriptor() ([]byte, []int) {
	return file_agent_task_proto_rawDescGZIP(), []int{6, 0}
}

// VideoMetadata 包含了视频的元数据。
type VideoMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 可选。发送到模型的视频帧率。如果未指定，默认值为 1.0。FPS 范围为 (0.0, 24.0]。
	Fps *float64 `protobuf:"fixed64,1,opt,name=fps,proto3,oneof" json:"fps,omitempty"`
	// 可选。视频的结束偏移量。
	EndOffset *duration.Duration `protobuf:"bytes,2,opt,name=end_offset,json=endOffset,proto3" json:"end_offset,omitempty"`
	// 可选。视频的开始偏移量。
	StartOffset *duration.Duration `protobuf:"bytes,3,opt,name=start_offset,json=startOffset,proto3" json:"start_offset,omitempty"`
}

func (x *VideoMetadata) Reset() {
	*x = VideoMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_task_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoMetadata) ProtoMessage() {}

func (x *VideoMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_agent_task_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoMetadata.ProtoReflect.Descriptor instead.
func (*VideoMetadata) Descriptor() ([]byte, []int) {
	return file_agent_task_proto_rawDescGZIP(), []int{0}
}

func (x *VideoMetadata) GetFps() float64 {
	if x != nil && x.Fps != nil {
		return *x.Fps
	}
	return 0
}

func (x *VideoMetadata) GetEndOffset() *duration.Duration {
	if x != nil {
		return x.EndOffset
	}
	return nil
}

func (x *VideoMetadata) GetStartOffset() *duration.Duration {
	if x != nil {
		return x.StartOffset
	}
	return nil
}

// Blob 包含了内联的二进制数据。
type Blob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 可选。Blob 的显示名称。用于提供标签或文件名以区分 Blob。此字段目前未在 Gemini GenerateContent 调用中使用。
	DisplayName string `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// 必填。原始字节数据。
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	// 必填。源数据的 IANA 标准 MIME 类型。
	MimeType string `protobuf:"bytes,3,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
}

func (x *Blob) Reset() {
	*x = Blob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_task_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Blob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Blob) ProtoMessage() {}

func (x *Blob) ProtoReflect() protoreflect.Message {
	mi := &file_agent_task_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Blob.ProtoReflect.Descriptor instead.
func (*Blob) Descriptor() ([]byte, []int) {
	return file_agent_task_proto_rawDescGZIP(), []int{1}
}

func (x *Blob) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Blob) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Blob) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

// FileData 包含了文件数据。
type FileData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 可选。文件数据的显示名称。用于提供标签或文件名以区分文件数据。目前未在 Gemini GenerateContent 调用中使用。
	DisplayName string `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// 可选。必填。URI。
	FileUri string `protobuf:"bytes,2,opt,name=file_uri,json=fileUri,proto3" json:"file_uri,omitempty"`
	// 可选。必填。源数据的 IANA 标准 MIME 类型。
	MimeType string `protobuf:"bytes,3,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
}

func (x *FileData) Reset() {
	*x = FileData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_task_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileData) ProtoMessage() {}

func (x *FileData) ProtoReflect() protoreflect.Message {
	mi := &file_agent_task_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileData.ProtoReflect.Descriptor instead.
func (*FileData) Descriptor() ([]byte, []int) {
	return file_agent_task_proto_rawDescGZIP(), []int{2}
}

func (x *FileData) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *FileData) GetFileUri() string {
	if x != nil {
		return x.FileUri
	}
	return ""
}

func (x *FileData) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

// CodeExecutionResult 包含了代码执行的结果。
type CodeExecutionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 必填。代码执行的结果。
	Outcome CodeExecutionResult_Outcome `protobuf:"varint,1,opt,name=outcome,proto3,enum=v1.CodeExecutionResult_Outcome" json:"outcome,omitempty"`
	// 可选。代码执行成功时包含 stdout，否则包含 stderr 或其他描述。
	Output string `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *CodeExecutionResult) Reset() {
	*x = CodeExecutionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_task_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeExecutionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeExecutionResult) ProtoMessage() {}

func (x *CodeExecutionResult) ProtoReflect() protoreflect.Message {
	mi := &file_agent_task_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeExecutionResult.ProtoReflect.Descriptor instead.
func (*CodeExecutionResult) Descriptor() ([]byte, []int) {
	return file_agent_task_proto_rawDescGZIP(), []int{3}
}

func (x *CodeExecutionResult) GetOutcome() CodeExecutionResult_Outcome {
	if x != nil {
		return x.Outcome
	}
	return CodeExecutionResult_OUTCOME_UNSPECIFIED
}

func (x *CodeExecutionResult) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

// ExecutableCode 包含了模型生成的用于执行的代码。
type ExecutableCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 必填。要执行的代码。
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	// 必填。`code` 的编程语言。
	Language ExecutableCode_Language `protobuf:"varint,2,opt,name=language,proto3,enum=v1.ExecutableCode_Language" json:"language,omitempty"`
}

func (x *ExecutableCode) Reset() {
	*x = ExecutableCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_task_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutableCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutableCode) ProtoMessage() {}

func (x *ExecutableCode) ProtoReflect() protoreflect.Message {
	mi := &file_agent_task_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutableCode.ProtoReflect.Descriptor instead.
func (*ExecutableCode) Descriptor() ([]byte, []int) {
	return file_agent_task_proto_rawDescGZIP(), []int{4}
}

func (x *ExecutableCode) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ExecutableCode) GetLanguage() ExecutableCode_Language {
	if x != nil {
		return x.Language
	}
	return ExecutableCode_LANGUAGE_UNSPECIFIED
}

// FunctionCall 包含了模型预测的函数调用信息。
type FunctionCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 可选。函数调用的唯一 ID。如果已填充，客户端将执行 `function_call` 并返回具有匹配 `id` 的响应。
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 可选。JSON 对象格式的函数参数和值。有关参数详细信息，请参阅 [FunctionDeclaration.parameters]。
	Args *_struct.Struct `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty"`
	// 必填。要调用的函数名称。与 [FunctionDeclaration.Name] 匹配。
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *FunctionCall) Reset() {
	*x = FunctionCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_task_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunctionCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionCall) ProtoMessage() {}

func (x *FunctionCall) ProtoReflect() protoreflect.Message {
	mi := &file_agent_task_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionCall.ProtoReflect.Descriptor instead.
func (*FunctionCall) Descriptor() ([]byte, []int) {
	return file_agent_task_proto_rawDescGZIP(), []int{5}
}

func (x *FunctionCall) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FunctionCall) GetArgs() *_struct.Struct {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *FunctionCall) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// FunctionResponse 包含了函数调用的结果输出。
type FunctionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 可选。表示函数调用继续，并将返回更多响应，将函数调用变为生成器。仅适用于 NON_BLOCKING 函数调用（有关详细信息，请参阅 FunctionDeclaration.behavior），否则将被忽略。
	// 如果为 false（默认值），则不会考虑未来的响应。仅适用于 NON_BLOCKING 函数调用，否则将被忽略。如果设置为 false，则不会考虑未来的响应。
	// 允许返回空的 `response` 和 `will_continue=False` 以表示函数调用已完成。
	WillContinue *bool `protobuf:"varint,1,opt,name=will_continue,json=willContinue,proto3,oneof" json:"will_continue,omitempty"`
	// 可选。指定响应在对话中应如何调度。仅适用于 NON_BLOCKING 函数调用，否则将被忽略。默认为 WHEN_IDLE。
	Scheduling FunctionResponse_FunctionResponseScheduling `protobuf:"varint,2,opt,name=scheduling,proto3,enum=v1.FunctionResponse_FunctionResponseScheduling" json:"scheduling,omitempty"`
	// 可选。此响应对应的函数调用 ID。由客户端填充以匹配相应的函数调用 `id`。
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// 必填。要调用的函数名称。与 [FunctionDeclaration.name] 和 [FunctionCall.name] 匹配。
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// 必填。JSON 对象格式的函数响应。使用 "output" 键指定函数输出，使用 "error" 键指定错误详细信息（如果有）。
	// 如果未指定 "output" 和 "error" 键，则整个 "response" 被视为函数输出。
	Response *_struct.Struct `protobuf:"bytes,5,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *FunctionResponse) Reset() {
	*x = FunctionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_task_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunctionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionResponse) ProtoMessage() {}

func (x *FunctionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_agent_task_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionResponse.ProtoReflect.Descriptor instead.
func (*FunctionResponse) Descriptor() ([]byte, []int) {
	return file_agent_task_proto_rawDescGZIP(), []int{6}
}

func (x *FunctionResponse) GetWillContinue() bool {
	if x != nil && x.WillContinue != nil {
		return *x.WillContinue
	}
	return false
}

func (x *FunctionResponse) GetScheduling() FunctionResponse_FunctionResponseScheduling {
	if x != nil {
		return x.Scheduling
	}
	return FunctionResponse_SCHEDULING_UNSPECIFIED
}

func (x *FunctionResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FunctionResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FunctionResponse) GetResponse() *_struct.Struct {
	if x != nil {
		return x.Response
	}
	return nil
}

// Part 定义了消息的单个部分，可以包含文本、内联数据、文件数据等。
type Part struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 可选。给定视频的元数据。
	VideoMetadata *VideoMetadata `protobuf:"bytes,1,opt,name=video_metadata,json=videoMetadata,proto3" json:"video_metadata,omitempty"`
	// 可选。指示该部分是否来自模型的思考。
	Thought bool `protobuf:"varint,2,opt,name=thought,proto3" json:"thought,omitempty"`
	// 可选。内联字节数据。
	InlineData *Blob `protobuf:"bytes,3,opt,name=inline_data,json=inlineData,proto3" json:"inline_data,omitempty"`
	// 可选。基于 URI 的数据。
	FileData *FileData `protobuf:"bytes,4,opt,name=file_data,json=fileData,proto3" json:"file_data,omitempty"`
	// 可选。思考的不透明签名，以便在后续请求中重用。
	ThoughtSignature []byte `protobuf:"bytes,5,opt,name=thought_signature,json=thoughtSignature,proto3" json:"thought_signature,omitempty"`
	// 可选。执行 [ExecutableCode] 的结果。
	CodeExecutionResult *CodeExecutionResult `protobuf:"bytes,6,opt,name=code_execution_result,json=codeExecutionResult,proto3" json:"code_execution_result,omitempty"`
	// 可选。模型生成的用于执行的代码。
	ExecutableCode *ExecutableCode `protobuf:"bytes,7,opt,name=executable_code,json=executableCode,proto3" json:"executable_code,omitempty"`
	// 可选。从模型返回的预测 [FunctionCall]，包含表示 [FunctionDeclaration.Name] 的字符串以及参数及其值。
	FunctionCall *FunctionCall `protobuf:"bytes,8,opt,name=function_call,json=functionCall,proto3" json:"function_call,omitempty"`
	// 可选。 [FunctionCall] 的结果输出，包含表示 [FunctionDeclaration.Name] 的字符串和包含函数调用任何输出的结构化 JSON 对象。
	// 它用作模型的上下文。
	FunctionResponse *FunctionResponse `protobuf:"bytes,9,opt,name=function_response,json=functionResponse,proto3" json:"function_response,omitempty"`
	// 可选。文本部分（可以是代码）。
	Text string `protobuf:"bytes,10,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *Part) Reset() {
	*x = Part{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_task_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Part) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Part) ProtoMessage() {}

func (x *Part) ProtoReflect() protoreflect.Message {
	mi := &file_agent_task_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Part.ProtoReflect.Descriptor instead.
func (*Part) Descriptor() ([]byte, []int) {
	return file_agent_task_proto_rawDescGZIP(), []int{7}
}

func (x *Part) GetVideoMetadata() *VideoMetadata {
	if x != nil {
		return x.VideoMetadata
	}
	return nil
}

func (x *Part) GetThought() bool {
	if x != nil {
		return x.Thought
	}
	return false
}

func (x *Part) GetInlineData() *Blob {
	if x != nil {
		return x.InlineData
	}
	return nil
}

func (x *Part) GetFileData() *FileData {
	if x != nil {
		return x.FileData
	}
	return nil
}

func (x *Part) GetThoughtSignature() []byte {
	if x != nil {
		return x.ThoughtSignature
	}
	return nil
}

func (x *Part) GetCodeExecutionResult() *CodeExecutionResult {
	if x != nil {
		return x.CodeExecutionResult
	}
	return nil
}

func (x *Part) GetExecutableCode() *ExecutableCode {
	if x != nil {
		return x.ExecutableCode
	}
	return nil
}

func (x *Part) GetFunctionCall() *FunctionCall {
	if x != nil {
		return x.FunctionCall
	}
	return nil
}

func (x *Part) GetFunctionResponse() *FunctionResponse {
	if x != nil {
		return x.FunctionResponse
	}
	return nil
}

func (x *Part) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// Content 包含了构成单个消息的多个部分。
type Content struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parts []*Part `protobuf:"bytes,1,rep,name=parts,proto3" json:"parts,omitempty"`
	Role  string  `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *Content) Reset() {
	*x = Content{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_task_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Content) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Content) ProtoMessage() {}

func (x *Content) ProtoReflect() protoreflect.Message {
	mi := &file_agent_task_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Content.ProtoReflect.Descriptor instead.
func (*Content) Descriptor() ([]byte, []int) {
	return file_agent_task_proto_rawDescGZIP(), []int{8}
}

func (x *Content) GetParts() []*Part {
	if x != nil {
		return x.Parts
	}
	return nil
}

func (x *Content) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

// GenerateContentRequest 定义了生成内容的请求结构。
type GenerateContentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content []*Content `protobuf:"bytes,1,rep,name=content,proto3" json:"content,omitempty"`
	Role    string     `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *GenerateContentRequest) Reset() {
	*x = GenerateContentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_task_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateContentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateContentRequest) ProtoMessage() {}

func (x *GenerateContentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_task_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateContentRequest.ProtoReflect.Descriptor instead.
func (*GenerateContentRequest) Descriptor() ([]byte, []int) {
	return file_agent_task_proto_rawDescGZIP(), []int{9}
}

func (x *GenerateContentRequest) GetContent() []*Content {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *GenerateContentRequest) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

// GenerateContentResponse 定义了生成内容的响应结构。
type GenerateContentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content      []*Content           `protobuf:"bytes,1,rep,name=content,proto3" json:"content,omitempty"`
	CreateTime   *timestamp.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	ResponseId   string               `protobuf:"bytes,3,opt,name=response_id,json=responseId,proto3" json:"response_id,omitempty"`
	ModelVersion string               `protobuf:"bytes,4,opt,name=model_version,json=modelVersion,proto3" json:"model_version,omitempty"`
}

func (x *GenerateContentResponse) Reset() {
	*x = GenerateContentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_task_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateContentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateContentResponse) ProtoMessage() {}

func (x *GenerateContentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_agent_task_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateContentResponse.ProtoReflect.Descriptor instead.
func (*GenerateContentResponse) Descriptor() ([]byte, []int) {
	return file_agent_task_proto_rawDescGZIP(), []int{10}
}

func (x *GenerateContentResponse) GetContent() []*Content {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *GenerateContentResponse) GetCreateTime() *timestamp.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *GenerateContentResponse) GetResponseId() string {
	if x != nil {
		return x.ResponseId
	}
	return ""
}

func (x *GenerateContentResponse) GetModelVersion() string {
	if x != nil {
		return x.ModelVersion
	}
	return ""
}

// RetryPolicy 定义了任务失败后的重试策略。
type RetryPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxRetries   int32   `protobuf:"varint,1,opt,name=max_retries,json=maxRetries,proto3" json:"max_retries,omitempty"`
	BackoffCoeff float64 `protobuf:"fixed64,2,opt,name=backoff_coeff,json=backoffCoeff,proto3" json:"backoff_coeff,omitempty"`
	InitialDelay string  `protobuf:"bytes,3,opt,name=initial_delay,json=initialDelay,proto3" json:"initial_delay,omitempty"`
}

func (x *RetryPolicy) Reset() {
	*x = RetryPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_task_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetryPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryPolicy) ProtoMessage() {}

func (x *RetryPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_agent_task_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryPolicy.ProtoReflect.Descriptor instead.
func (*RetryPolicy) Descriptor() ([]byte, []int) {
	return file_agent_task_proto_rawDescGZIP(), []int{11}
}

func (x *RetryPolicy) GetMaxRetries() int32 {
	if x != nil {
		return x.MaxRetries
	}
	return 0
}

func (x *RetryPolicy) GetBackoffCoeff() float64 {
	if x != nil {
		return x.BackoffCoeff
	}
	return 0
}

func (x *RetryPolicy) GetInitialDelay() string {
	if x != nil {
		return x.InitialDelay
	}
	return ""
}

// AgentTask 是用于 Agent 之间通信和任务分配的核心结构。
type AgentTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// --- 核心元数据 ---
	TaskId        string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	CorrelationId string `protobuf:"bytes,2,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	ParentTaskId  string `protobuf:"bytes,3,opt,name=parent_task_id,json=parentTaskId,proto3" json:"parent_task_id,omitempty"`
	// --- 路由和命名 ---
	SourceAgentId string `protobuf:"bytes,4,opt,name=source_agent_id,json=sourceAgentId,proto3" json:"source_agent_id,omitempty"`
	TargetAgentId string `protobuf:"bytes,5,opt,name=target_agent_id,json=targetAgentId,proto3" json:"target_agent_id,omitempty"`
	TaskName      string `protobuf:"bytes,6,opt,name=task_name,json=taskName,proto3" json:"task_name,omitempty"`
	// --- 载荷 (Payload) ---
	Content []*Content `protobuf:"bytes,7,rep,name=content,proto3" json:"content,omitempty"`
	// --- 控制参数 ---
	CreatedAt      *timestamp.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	TimeoutSeconds int32                `protobuf:"varint,9,opt,name=timeout_seconds,json=timeoutSeconds,proto3" json:"timeout_seconds,omitempty"`
	RetryPolicy    *RetryPolicy         `protobuf:"bytes,10,opt,name=retry_policy,json=retryPolicy,proto3" json:"retry_policy,omitempty"`
}

func (x *AgentTask) Reset() {
	*x = AgentTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_task_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentTask) ProtoMessage() {}

func (x *AgentTask) ProtoReflect() protoreflect.Message {
	mi := &file_agent_task_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentTask.ProtoReflect.Descriptor instead.
func (*AgentTask) Descriptor() ([]byte, []int) {
	return file_agent_task_proto_rawDescGZIP(), []int{12}
}

func (x *AgentTask) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *AgentTask) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *AgentTask) GetParentTaskId() string {
	if x != nil {
		return x.ParentTaskId
	}
	return ""
}

func (x *AgentTask) GetSourceAgentId() string {
	if x != nil {
		return x.SourceAgentId
	}
	return ""
}

func (x *AgentTask) GetTargetAgentId() string {
	if x != nil {
		return x.TargetAgentId
	}
	return ""
}

func (x *AgentTask) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *AgentTask) GetContent() []*Content {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *AgentTask) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *AgentTask) GetTimeoutSeconds() int32 {
	if x != nil {
		return x.TimeoutSeconds
	}
	return 0
}

func (x *AgentTask) GetRetryPolicy() *RetryPolicy {
	if x != nil {
		return x.RetryPolicy
	}
	return nil
}

// AgentMetadata 定义了 Agent 的能力描述。
type AgentMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Capability        string `protobuf:"bytes,2,opt,name=capability,proto3" json:"capability,omitempty"`
	InputDescription  string `protobuf:"bytes,3,opt,name=input_description,json=inputDescription,proto3" json:"input_description,omitempty"`
	OutputDescription string `protobuf:"bytes,4,opt,name=output_description,json=outputDescription,proto3" json:"output_description,omitempty"`
}

func (x *AgentMetadata) Reset() {
	*x = AgentMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_task_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentMetadata) ProtoMessage() {}

func (x *AgentMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_agent_task_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentMetadata.ProtoReflect.Descriptor instead.
func (*AgentMetadata) Descriptor() ([]byte, []int) {
	return file_agent_task_proto_rawDescGZIP(), []int{13}
}

func (x *AgentMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AgentMetadata) GetCapability() string {
	if x != nil {
		return x.Capability
	}
	return ""
}

func (x *AgentMetadata) GetInputDescription() string {
	if x != nil {
		return x.InputDescription
	}
	return ""
}

func (x *AgentMetadata) GetOutputDescription() string {
	if x != nil {
		return x.OutputDescription
	}
	return ""
}

var File_agent_task_proto protoreflect.FileDescriptor

var file_agent_task_proto_rawDesc = []byte{
	0x0a, 0x10, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x02, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xa6, 0x01, 0x0a, 0x0d, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x15, 0x0a, 0x03, 0x66, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x00, 0x52, 0x03, 0x66, 0x70, 0x73, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x0a, 0x65,
	0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x3c, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x66, 0x70, 0x73, 0x22, 0x5a, 0x0a, 0x04, 0x42,
	0x6c, 0x6f, 0x62, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69,
	0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d,
	0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x65, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75,
	0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x72,
	0x69, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa0,
	0x01, 0x0a, 0x13, 0x43, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x39, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x2e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x36, 0x0a, 0x07, 0x4f, 0x75, 0x74,
	0x63, 0x6f, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x55, 0x54, 0x43, 0x4f, 0x4d, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x06, 0x0a,
	0x02, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0x02, 0x22, 0x97, 0x01, 0x0a, 0x0e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x22, 0x38, 0x0a, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a,
	0x14, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x59, 0x54, 0x48, 0x4f,
	0x4e, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x47, 0x4f, 0x10, 0x02, 0x22, 0x5f, 0x0a, 0x0c, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x04, 0x61,
	0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xd0, 0x02, 0x0a,
	0x10, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x28, 0x0a, 0x0d, 0x77, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0c, 0x77, 0x69, 0x6c, 0x6c,
	0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x0a, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2f, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67,
	0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x33, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x56, 0x0a, 0x1a, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x49, 0x4e,
	0x47, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x57, 0x48, 0x45, 0x4e, 0x5f, 0x49, 0x44, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0d,
	0x0a, 0x09, 0x49, 0x4d, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x45, 0x10, 0x02, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x77, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x22,
	0xf5, 0x03, 0x0a, 0x04, 0x50, 0x61, 0x72, 0x74, 0x12, 0x38, 0x0a, 0x0e, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x0d, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x74, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x12, 0x29, 0x0a, 0x0b,
	0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x0a, 0x69, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x5f, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x74,
	0x68, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x4b, 0x0a, 0x15, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x13, 0x63, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3b, 0x0a, 0x0f,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x0d, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61,
	0x6c, 0x6c, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c,
	0x12, 0x41, 0x0a, 0x11, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x10, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x3d, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x53, 0x0a, 0x16, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x25, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0xc3, 0x01, 0x0a, 0x17,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x3b,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x78, 0x0a, 0x0b, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x5f, 0x63, 0x6f, 0x65,
	0x66, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66,
	0x66, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x22, 0x9d, 0x03, 0x0a, 0x09,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x72, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x27,
	0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x79,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0b,
	0x72, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x9f, 0x01, 0x0a, 0x0d,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d,
	0x0a, 0x12, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x75, 0x0a,
	0x0c, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2b, 0x0a,
	0x0b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x0d, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x1a, 0x0d, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x38, 0x0a, 0x0b, 0x47, 0x65,
	0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x11, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_agent_task_proto_rawDescOnce sync.Once
	file_agent_task_proto_rawDescData = file_agent_task_proto_rawDesc
)

func file_agent_task_proto_rawDescGZIP() []byte {
	file_agent_task_proto_rawDescOnce.Do(func() {
		file_agent_task_proto_rawDescData = protoimpl.X.CompressGZIP(file_agent_task_proto_rawDescData)
	})
	return file_agent_task_proto_rawDescData
}

var file_agent_task_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_agent_task_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_agent_task_proto_goTypes = []interface{}{
	(CodeExecutionResult_Outcome)(0),                 // 0: v1.CodeExecutionResult.Outcome
	(ExecutableCode_Language)(0),                     // 1: v1.ExecutableCode.Language
	(FunctionResponse_FunctionResponseScheduling)(0), // 2: v1.FunctionResponse.FunctionResponseScheduling
	(*VideoMetadata)(nil),                            // 3: v1.VideoMetadata
	(*Blob)(nil),                                     // 4: v1.Blob
	(*FileData)(nil),                                 // 5: v1.FileData
	(*CodeExecutionResult)(nil),                      // 6: v1.CodeExecutionResult
	(*ExecutableCode)(nil),                           // 7: v1.ExecutableCode
	(*FunctionCall)(nil),                             // 8: v1.FunctionCall
	(*FunctionResponse)(nil),                         // 9: v1.FunctionResponse
	(*Part)(nil),                                     // 10: v1.Part
	(*Content)(nil),                                  // 11: v1.Content
	(*GenerateContentRequest)(nil),                   // 12: v1.GenerateContentRequest
	(*GenerateContentResponse)(nil),                  // 13: v1.GenerateContentResponse
	(*RetryPolicy)(nil),                              // 14: v1.RetryPolicy
	(*AgentTask)(nil),                                // 15: v1.AgentTask
	(*AgentMetadata)(nil),                            // 16: v1.AgentMetadata
	(*duration.Duration)(nil),                        // 17: google.protobuf.Duration
	(*_struct.Struct)(nil),                           // 18: google.protobuf.Struct
	(*timestamp.Timestamp)(nil),                      // 19: google.protobuf.Timestamp
	(*empty.Empty)(nil),                              // 20: google.protobuf.Empty
}
var file_agent_task_proto_depIdxs = []int32{
	17, // 0: v1.VideoMetadata.end_offset:type_name -> google.protobuf.Duration
	17, // 1: v1.VideoMetadata.start_offset:type_name -> google.protobuf.Duration
	0,  // 2: v1.CodeExecutionResult.outcome:type_name -> v1.CodeExecutionResult.Outcome
	1,  // 3: v1.ExecutableCode.language:type_name -> v1.ExecutableCode.Language
	18, // 4: v1.FunctionCall.args:type_name -> google.protobuf.Struct
	2,  // 5: v1.FunctionResponse.scheduling:type_name -> v1.FunctionResponse.FunctionResponseScheduling
	18, // 6: v1.FunctionResponse.response:type_name -> google.protobuf.Struct
	3,  // 7: v1.Part.video_metadata:type_name -> v1.VideoMetadata
	4,  // 8: v1.Part.inline_data:type_name -> v1.Blob
	5,  // 9: v1.Part.file_data:type_name -> v1.FileData
	6,  // 10: v1.Part.code_execution_result:type_name -> v1.CodeExecutionResult
	7,  // 11: v1.Part.executable_code:type_name -> v1.ExecutableCode
	8,  // 12: v1.Part.function_call:type_name -> v1.FunctionCall
	9,  // 13: v1.Part.function_response:type_name -> v1.FunctionResponse
	10, // 14: v1.Content.parts:type_name -> v1.Part
	11, // 15: v1.GenerateContentRequest.content:type_name -> v1.Content
	11, // 16: v1.GenerateContentResponse.content:type_name -> v1.Content
	19, // 17: v1.GenerateContentResponse.create_time:type_name -> google.protobuf.Timestamp
	11, // 18: v1.AgentTask.content:type_name -> v1.Content
	19, // 19: v1.AgentTask.created_at:type_name -> google.protobuf.Timestamp
	14, // 20: v1.AgentTask.retry_policy:type_name -> v1.RetryPolicy
	15, // 21: v1.AgentService.ExecuteTask:input_type -> v1.AgentTask
	20, // 22: v1.AgentService.GetMetadata:input_type -> google.protobuf.Empty
	15, // 23: v1.AgentService.ExecuteTask:output_type -> v1.AgentTask
	16, // 24: v1.AgentService.GetMetadata:output_type -> v1.AgentMetadata
	23, // [23:25] is the sub-list for method output_type
	21, // [21:23] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_agent_task_proto_init() }
func file_agent_task_proto_init() {
	if File_agent_task_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_agent_task_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_task_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Blob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_task_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_task_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeExecutionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_task_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutableCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_task_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunctionCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_task_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunctionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_task_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Part); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_task_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Content); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_task_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateContentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_task_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateContentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_task_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetryPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_task_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_task_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_agent_task_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_agent_task_proto_msgTypes[6].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_agent_task_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_agent_task_proto_goTypes,
		DependencyIndexes: file_agent_task_proto_depIdxs,
		EnumInfos:         file_agent_task_proto_enumTypes,
		MessageInfos:      file_agent_task_proto_msgTypes,
	}.Build()
	File_agent_task_proto = out.File
	file_agent_task_proto_rawDesc = nil
	file_agent_task_proto_goTypes = nil
	file_agent_task_proto_depIdxs = nil
}
