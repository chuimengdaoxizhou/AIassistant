// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: api/proto/v1/rag/rag.proto

package rag

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RagService_Index_FullMethodName        = "/v1.rag.RagService/Index"
	RagService_Query_FullMethodName        = "/v1.rag.RagService/Query"
	RagService_CreateFolder_FullMethodName = "/v1.rag.RagService/CreateFolder"
	RagService_ListFolders_FullMethodName  = "/v1.rag.RagService/ListFolders"
)

// RagServiceClient is the client API for RagService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RagServiceClient interface {
	// Indexes a list of files or URLs into a specific user's folder.
	Index(ctx context.Context, in *IndexRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[IndexResponse], error)
	// Performs a query against documents in specific folders for a user.
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error)
	// Creates a new folder for a user.
	CreateFolder(ctx context.Context, in *CreateFolderRequest, opts ...grpc.CallOption) (*FolderResponse, error)
	// Lists all folders for a user.
	ListFolders(ctx context.Context, in *ListFoldersRequest, opts ...grpc.CallOption) (*ListFoldersResponse, error)
}

type ragServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRagServiceClient(cc grpc.ClientConnInterface) RagServiceClient {
	return &ragServiceClient{cc}
}

func (c *ragServiceClient) Index(ctx context.Context, in *IndexRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[IndexResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RagService_ServiceDesc.Streams[0], RagService_Index_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[IndexRequest, IndexResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RagService_IndexClient = grpc.ServerStreamingClient[IndexResponse]

func (c *ragServiceClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, RagService_Query_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ragServiceClient) CreateFolder(ctx context.Context, in *CreateFolderRequest, opts ...grpc.CallOption) (*FolderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FolderResponse)
	err := c.cc.Invoke(ctx, RagService_CreateFolder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ragServiceClient) ListFolders(ctx context.Context, in *ListFoldersRequest, opts ...grpc.CallOption) (*ListFoldersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFoldersResponse)
	err := c.cc.Invoke(ctx, RagService_ListFolders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RagServiceServer is the server API for RagService service.
// All implementations must embed UnimplementedRagServiceServer
// for forward compatibility.
type RagServiceServer interface {
	// Indexes a list of files or URLs into a specific user's folder.
	Index(*IndexRequest, grpc.ServerStreamingServer[IndexResponse]) error
	// Performs a query against documents in specific folders for a user.
	Query(context.Context, *QueryRequest) (*QueryResponse, error)
	// Creates a new folder for a user.
	CreateFolder(context.Context, *CreateFolderRequest) (*FolderResponse, error)
	// Lists all folders for a user.
	ListFolders(context.Context, *ListFoldersRequest) (*ListFoldersResponse, error)
	mustEmbedUnimplementedRagServiceServer()
}

// UnimplementedRagServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRagServiceServer struct{}

func (UnimplementedRagServiceServer) Index(*IndexRequest, grpc.ServerStreamingServer[IndexResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Index not implemented")
}
func (UnimplementedRagServiceServer) Query(context.Context, *QueryRequest) (*QueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedRagServiceServer) CreateFolder(context.Context, *CreateFolderRequest) (*FolderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFolder not implemented")
}
func (UnimplementedRagServiceServer) ListFolders(context.Context, *ListFoldersRequest) (*ListFoldersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFolders not implemented")
}
func (UnimplementedRagServiceServer) mustEmbedUnimplementedRagServiceServer() {}
func (UnimplementedRagServiceServer) testEmbeddedByValue()                    {}

// UnsafeRagServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RagServiceServer will
// result in compilation errors.
type UnsafeRagServiceServer interface {
	mustEmbedUnimplementedRagServiceServer()
}

func RegisterRagServiceServer(s grpc.ServiceRegistrar, srv RagServiceServer) {
	// If the following call pancis, it indicates UnimplementedRagServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RagService_ServiceDesc, srv)
}

func _RagService_Index_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(IndexRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RagServiceServer).Index(m, &grpc.GenericServerStream[IndexRequest, IndexResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RagService_IndexServer = grpc.ServerStreamingServer[IndexResponse]

func _RagService_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RagServiceServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RagService_Query_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RagServiceServer).Query(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RagService_CreateFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RagServiceServer).CreateFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RagService_CreateFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RagServiceServer).CreateFolder(ctx, req.(*CreateFolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RagService_ListFolders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFoldersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RagServiceServer).ListFolders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RagService_ListFolders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RagServiceServer).ListFolders(ctx, req.(*ListFoldersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RagService_ServiceDesc is the grpc.ServiceDesc for RagService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RagService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.rag.RagService",
	HandlerType: (*RagServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Query",
			Handler:    _RagService_Query_Handler,
		},
		{
			MethodName: "CreateFolder",
			Handler:    _RagService_CreateFolder_Handler,
		},
		{
			MethodName: "ListFolders",
			Handler:    _RagService_ListFolders_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Index",
			Handler:       _RagService_Index_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/proto/v1/rag/rag.proto",
}
