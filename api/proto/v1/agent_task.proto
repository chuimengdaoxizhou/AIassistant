syntax = "proto3";

package v1;

import "google/protobuf/duration.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

option go_package = "./v1;v1";

// ----------------------------------------------------------------------------
// Messages from multimodal_content.proto
// ----------------------------------------------------------------------------

// VideoMetadata 包含了视频的元数据。
message VideoMetadata {
  // 可选。发送到模型的视频帧率。如果未指定，默认值为 1.0。FPS 范围为 (0.0, 24.0]。
  optional double fps = 1;
  // 可选。视频的结束偏移量。
  google.protobuf.Duration end_offset = 2;
  // 可选。视频的开始偏移量。
  google.protobuf.Duration start_offset = 3;
}

// Blob 包含了内联的二进制数据。
message Blob {
  // 可选。Blob 的显示名称。用于提供标签或文件名以区分 Blob。此字段目前未在 Gemini GenerateContent 调用中使用。
  string display_name = 1;
  // 必填。原始字节数据。
  bytes data = 2;
  // 必填。源数据的 IANA 标准 MIME 类型。
  string mime_type = 3;
}

// FileData 包含了文件数据。
message FileData {
  // 可选。文件数据的显示名称。用于提供标签或文件名以区分文件数据。目前未在 Gemini GenerateContent 调用中使用。
  string display_name = 1;
  // 可选。必填。URI。
  string file_uri = 2;
  // 可选。必填。源数据的 IANA 标准 MIME 类型。
  string mime_type = 3;
}

// CodeExecutionResult 包含了代码执行的结果。
message CodeExecutionResult {
  // 定义了代码执行的结果。
  enum Outcome {
    OUTCOME_UNSPECIFIED = 0;
    OK = 1;
    FAILED = 2;
  }
  // 必填。代码执行的结果。
  Outcome outcome = 1;
  // 可选。代码执行成功时包含 stdout，否则包含 stderr 或其他描述。
  string output = 2;
}

// ExecutableCode 包含了模型生成的用于执行的代码。
message ExecutableCode {
  // 定义了编程语言。
  enum Language {
    LANGUAGE_UNSPECIFIED = 0;
    PYTHON = 1;
    GO = 2;
  }
  // 必填。要执行的代码。
  string code = 1;
  // 必填。`code` 的编程语言。
  Language language = 2;
}

// FunctionCall 包含了模型预测的函数调用信息。
message FunctionCall {
  // 可选。函数调用的唯一 ID。如果已填充，客户端将执行 `function_call` 并返回具有匹配 `id` 的响应。
  string id = 1;
  // 可选。JSON 对象格式的函数参数和值。有关参数详细信息，请参阅 [FunctionDeclaration.parameters]。
  google.protobuf.Struct args = 2;
  // 必填。要调用的函数名称。与 [FunctionDeclaration.Name] 匹配。
  string name = 3;
}

// FunctionResponse 包含了函数调用的结果输出。
message FunctionResponse {
  // 定义了函数响应的调度方式。
  enum FunctionResponseScheduling {
    SCHEDULING_UNSPECIFIED = 0;
    WHEN_IDLE = 1;
    IMMEDIATE = 2;
  }
  // 可选。表示函数调用继续，并将返回更多响应，将函数调用变为生成器。仅适用于 NON_BLOCKING 函数调用（有关详细信息，请参阅 FunctionDeclaration.behavior），否则将被忽略。
  // 如果为 false（默认值），则不会考虑未来的响应。仅适用于 NON_BLOCKING 函数调用，否则将被忽略。如果设置为 false，则不会考虑未来的响应。
  // 允许返回空的 `response` 和 `will_continue=False` 以表示函数调用已完成。
  optional bool will_continue = 1;
  // 可选。指定响应在对话中应如何调度。仅适用于 NON_BLOCKING 函数调用，否则将被忽略。默认为 WHEN_IDLE。
  FunctionResponseScheduling scheduling = 2;
  // 可选。此响应对应的函数调用 ID。由客户端填充以匹配相应的函数调用 `id`。
  string id = 3;
  // 必填。要调用的函数名称。与 [FunctionDeclaration.name] 和 [FunctionCall.name] 匹配。
  string name = 4;
  // 必填。JSON 对象格式的函数响应。使用 "output" 键指定函数输出，使用 "error" 键指定错误详细信息（如果有）。
  // 如果未指定 "output" 和 "error" 键，则整个 "response" 被视为函数输出。
  google.protobuf.Struct response = 5;
}

// Part 定义了消息的单个部分，可以包含文本、内联数据、文件数据等。
message Part {
  // 可选。给定视频的元数据。
  VideoMetadata video_metadata = 1;
  // 可选。指示该部分是否来自模型的思考。
  bool thought = 2;
  // 可选。内联字节数据。
  Blob inline_data = 3;
  // 可选。基于 URI 的数据。
  FileData file_data = 4;
  // 可选。思考的不透明签名，以便在后续请求中重用。
  bytes thought_signature = 5;
  // 可选。执行 [ExecutableCode] 的结果。
  CodeExecutionResult code_execution_result = 6;
  // 可选。模型生成的用于执行的代码。
  ExecutableCode executable_code = 7;
  // 可选。从模型返回的预测 [FunctionCall]，包含表示 [FunctionDeclaration.Name] 的字符串以及参数及其值。
  FunctionCall function_call = 8;
  // 可选。 [FunctionCall] 的结果输出，包含表示 [FunctionDeclaration.Name] 的字符串和包含函数调用任何输出的结构化 JSON 对象。
  // 它用作模型的上下文。
  FunctionResponse function_response = 9;
  // 可选。文本部分（可以是代码）。
  string text = 10;
}

// Content 包含了构成单个消息的多个部分。
message Content {
  repeated Part parts = 1;
  string role = 2;
}

// GenerateContentRequest 定义了生成内容的请求结构。
message GenerateContentRequest {
  repeated Content content = 1;
  string role = 2;
}

// GenerateContentResponse 定义了生成内容的响应结构。
message GenerateContentResponse {
  repeated Content content = 1;
  google.protobuf.Timestamp create_time = 2;
  string response_id = 3;
  string model_version = 4;
}


// ----------------------------------------------------------------------------
// Messages from agent_task.proto
// ----------------------------------------------------------------------------

// RetryPolicy 定义了任务失败后的重试策略。
message RetryPolicy {
  int32 max_retries = 1;
  double backoff_coeff = 2;
  string initial_delay = 3;
}

// AgentTask 是用于 Agent 之间通信和任务分配的核心结构。
message AgentTask {
  // --- 核心元数据 ---
  string task_id = 1;
  string correlation_id = 2;
  string parent_task_id = 3;

  // --- 路由和命名 ---
  string source_agent_id = 4;
  string target_agent_id = 5;
  string task_name = 6;

  // --- 载荷 (Payload) ---
  repeated Content content = 7;

  // --- 控制参数 ---
  google.protobuf.Timestamp created_at = 8;
  int32 timeout_seconds = 9;
  RetryPolicy retry_policy = 10;
}

// AgentService 定义了所有 Agent（包括主 Agent）都需要实现的通用服务接口。
service AgentService {
  // ExecuteTask 执行一个任务，并可能调用其他子 Agent。
  rpc ExecuteTask(AgentTask) returns (AgentTask);
  // GetMetadata 获取 Agent 的元数据，用于服务发现和能力查询。
  rpc GetMetadata(google.protobuf.Empty) returns (AgentMetadata);
}

// AgentMetadata 定义了 Agent 的能力描述。
message AgentMetadata {
  string name = 1;
  string capability = 2;
  string input_description = 3;
  string output_description = 4;
}